generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  DATABASE
  GOOGLE
  FACEBOOK
}

model category {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  slug        String   @unique
  order       Int
  createdAt   DateTime @default(now())
  lessons     lesson[]
}

model lesson {
  id                 Int      @id @default(autoincrement())
  title              String
  slug               String   @unique
  content            String   @db.LongText
  transcriptJsonPath String?
  audioUrl           String?
  duration           Float?
  order              Int
  createdAt          DateTime @default(now())

  categoryId Int
  category   category @relation(fields: [categoryId], references: [id])
}

model roles {
  id          BigInt        @id @default(autoincrement())
  name        String        @unique(map: "UKofx66keruapi6vyqpv6f2or37") @db.VarChar(255)
  users_roles users_roles[]
}

model users {
  id                                   BigInt        @id @default(autoincrement())
  account_non_locked                   Boolean       @db.Bit(1)
  address                              String?       @db.VarChar(70)
  authentication_type                  AuthType      @default(DATABASE)
  created_on                           DateTime?     @db.DateTime(6)
  email                                String        @unique @db.VarChar(255)
  enabled                              Boolean       @db.Bit(1)
  failed_attempt                       Int
  last_otp_send                        DateTime?     @db.DateTime(6)
  lock_time                            DateTime?     @db.DateTime(6)
  name                                 String        @db.VarChar(255)
  otp                                  String?       @db.VarChar(64)
  otp_expiry_date                      DateTime?     @db.DateTime(6)
  password                             String        @db.VarChar(255)
  phone_number                         String?       @db.VarChar(10)
  photos                               String?       @db.VarChar(64)
  reset_password_token                 String?       @db.VarChar(128)
  reset_password_token_expiration_time DateTime?     @db.DateTime(6)
  reset_password_requested_at          DateTime?     @db.DateTime(6)
  updated_on                           DateTime?     @db.DateTime(6)
  verification_code                    String?       @db.VarChar(128)
  users_roles                          users_roles[]
}

model users_roles {
  user_id BigInt
  role_id BigInt
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK2o0jvgh89lemvvo17cbqvdxaa")
  roles   roles  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FKj6m8fwv7oqv74fcehir1a9ffy")

  @@id([user_id, role_id])
  @@index([role_id], map: "FKj6m8fwv7oqv74fcehir1a9ffy")
}
