generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  DATABASE
  GOOGLE
  FACEBOOK
}

model invoice {
  id             Int     @id @default(autoincrement())
  invoice        String?
  payment_status String?
  payment_method String?
  total_amount   Float
}

model comments {
  id         BigInt    @id @default(autoincrement())
  content    String?   @db.LongText
  created_on DateTime? @db.DateTime(6)
  email      String    @db.VarChar(255)
  name       String    @db.VarChar(255)
  updated_on DateTime? @db.DateTime(6)
  votes      Int
  post_id    BigInt
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FKh4c7lvsc298whoyd4w9ta25cr")

  @@index([post_id], map: "FKh4c7lvsc298whoyd4w9ta25cr")
}

model guests {
  id            BigInt         @id @default(autoincrement())
  booking_date  DateTime?      @db.DateTime(6)
  checkin_date  DateTime?      @db.DateTime(6)
  checkout_date DateTime?      @db.DateTime(6)
  name          String?        @db.VarChar(100)
  photos        String?        @db.VarChar(64)
  room_id       String?        @db.VarChar(20)
  status        guests_status?
}

model posts {
  id                BigInt     @id @default(autoincrement())
  content           String     @db.TinyText
  created_on        DateTime   @db.DateTime(6)
  photos            String?    @db.VarChar(255)
  short_description String?    @db.VarChar(255)
  title             String     @db.VarChar(255)
  updated_on        DateTime?  @db.DateTime(6)
  url               String?    @db.VarChar(255)
  created_by        BigInt
  comments          comments[]
  users             users      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK4s8wtgwpo1h8p5tsy9f04ybjg")

  @@index([created_by], map: "FK4s8wtgwpo1h8p5tsy9f04ybjg")
}

model roles {
  id          BigInt        @id @default(autoincrement())
  name        String        @unique(map: "UKofx66keruapi6vyqpv6f2or37") @db.VarChar(255)
  users_roles users_roles[]
}

model users {
  id                                   BigInt        @id @default(autoincrement())
  account_non_locked                   Boolean       @db.Bit(1)
  address                              String?       @db.VarChar(70)
  authentication_type                  AuthType      @default(DATABASE)
  created_on                           DateTime?     @db.DateTime(6)
  email                                String        @unique @db.VarChar(255)
  enabled                              Boolean       @db.Bit(1)
  failed_attempt                       Int
  last_otp_send                        DateTime?     @db.DateTime(6)
  lock_time                            DateTime?     @db.DateTime(6)
  name                                 String        @db.VarChar(255)
  otp                                  String?       @db.VarChar(64)
  otp_expiry_date                      DateTime?     @db.DateTime(6)
  password                             String        @db.VarChar(255)
  phone_number                         String?       @db.VarChar(10)
  photos                               String?       @db.VarChar(64)
  reset_password_token                 String?       @db.VarChar(128)
  reset_password_token_expiration_time DateTime?     @db.DateTime(6)
  reset_password_requested_at          DateTime?     @db.DateTime(6)
  updated_on                           DateTime?     @db.DateTime(6)
  verification_code                    String?       @db.VarChar(128)
  posts                                posts[]
  users_roles                          users_roles[]
}

model users_roles {
  user_id BigInt
  role_id BigInt
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK2o0jvgh89lemvvo17cbqvdxaa")
  roles   roles  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FKj6m8fwv7oqv74fcehir1a9ffy")

  @@id([user_id, role_id])
  @@index([role_id], map: "FKj6m8fwv7oqv74fcehir1a9ffy")
}

enum guests_status {
  ALL
  BOOKED
  CANCELLED
  PENDING
}
